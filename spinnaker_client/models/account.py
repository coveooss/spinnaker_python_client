# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'name': 'str',
        'permissions': 'dict(str, list[str])',
        'required_group_membership': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'name': 'name',
        'permissions': 'permissions',
        'required_group_membership': 'requiredGroupMembership',
        'type': 'type'
    }

    def __init__(self, account_id=None, name=None, permissions=None, required_group_membership=None, type=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._name = None
        self._permissions = None
        self._required_group_membership = None
        self._type = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if permissions is not None:
            self.permissions = permissions
        if required_group_membership is not None:
            self.required_group_membership = required_group_membership
        if type is not None:
            self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501


        :return: The account_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501


        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.


        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this Account.  # noqa: E501


        :return: The permissions of this Account.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Account.


        :param permissions: The permissions of this Account.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._permissions = permissions

    @property
    def required_group_membership(self):
        """Gets the required_group_membership of this Account.  # noqa: E501


        :return: The required_group_membership of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_group_membership

    @required_group_membership.setter
    def required_group_membership(self, required_group_membership):
        """Sets the required_group_membership of this Account.


        :param required_group_membership: The required_group_membership of this Account.  # noqa: E501
        :type: list[str]
        """

        self._required_group_membership = required_group_membership

    @property
    def type(self):
        """Gets the type of this Account.  # noqa: E501


        :return: The type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Account.


        :param type: The type of this Account.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
