# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnvironmentArtifactPin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'pinned_by': 'str',
        'reference': 'str',
        'target_environment': 'str',
        'version': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'pinned_by': 'pinnedBy',
        'reference': 'reference',
        'target_environment': 'targetEnvironment',
        'version': 'version'
    }

    def __init__(self, comment=None, pinned_by=None, reference=None, target_environment=None, version=None):  # noqa: E501
        """EnvironmentArtifactPin - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._pinned_by = None
        self._reference = None
        self._target_environment = None
        self._version = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if pinned_by is not None:
            self.pinned_by = pinned_by
        if reference is not None:
            self.reference = reference
        if target_environment is not None:
            self.target_environment = target_environment
        if version is not None:
            self.version = version

    @property
    def comment(self):
        """Gets the comment of this EnvironmentArtifactPin.  # noqa: E501


        :return: The comment of this EnvironmentArtifactPin.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this EnvironmentArtifactPin.


        :param comment: The comment of this EnvironmentArtifactPin.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def pinned_by(self):
        """Gets the pinned_by of this EnvironmentArtifactPin.  # noqa: E501


        :return: The pinned_by of this EnvironmentArtifactPin.  # noqa: E501
        :rtype: str
        """
        return self._pinned_by

    @pinned_by.setter
    def pinned_by(self, pinned_by):
        """Sets the pinned_by of this EnvironmentArtifactPin.


        :param pinned_by: The pinned_by of this EnvironmentArtifactPin.  # noqa: E501
        :type: str
        """

        self._pinned_by = pinned_by

    @property
    def reference(self):
        """Gets the reference of this EnvironmentArtifactPin.  # noqa: E501


        :return: The reference of this EnvironmentArtifactPin.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this EnvironmentArtifactPin.


        :param reference: The reference of this EnvironmentArtifactPin.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def target_environment(self):
        """Gets the target_environment of this EnvironmentArtifactPin.  # noqa: E501


        :return: The target_environment of this EnvironmentArtifactPin.  # noqa: E501
        :rtype: str
        """
        return self._target_environment

    @target_environment.setter
    def target_environment(self, target_environment):
        """Sets the target_environment of this EnvironmentArtifactPin.


        :param target_environment: The target_environment of this EnvironmentArtifactPin.  # noqa: E501
        :type: str
        """

        self._target_environment = target_environment

    @property
    def version(self):
        """Gets the version of this EnvironmentArtifactPin.  # noqa: E501


        :return: The version of this EnvironmentArtifactPin.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EnvironmentArtifactPin.


        :param version: The version of this EnvironmentArtifactPin.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnvironmentArtifactPin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnvironmentArtifactPin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
