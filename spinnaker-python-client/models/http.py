# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Http(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'dict(str, str)',
        'headers': 'Headers',
        '_query_params': 'dict(str, str)',
        'url': 'str'
    }

    attribute_map = {
        'config': 'config',
        'headers': 'headers',
        '_query_params': 'queryParams',
        'url': 'url'
    }

    def __init__(self, config=None, headers=None, _query_params=None, url=None):  # noqa: E501
        """Http - a model defined in Swagger"""  # noqa: E501

        self._config = None
        self._headers = None
        self.__query_params = None
        self._url = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if headers is not None:
            self.headers = headers
        if _query_params is not None:
            self._query_params = _query_params
        if url is not None:
            self.url = url

    @property
    def config(self):
        """Gets the config of this Http.  # noqa: E501


        :return: The config of this Http.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Http.


        :param config: The config of this Http.  # noqa: E501
        :type: dict(str, str)
        """

        self._config = config

    @property
    def headers(self):
        """Gets the headers of this Http.  # noqa: E501


        :return: The headers of this Http.  # noqa: E501
        :rtype: Headers
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Http.


        :param headers: The headers of this Http.  # noqa: E501
        :type: Headers
        """

        self._headers = headers

    @property
    def _query_params(self):
        """Gets the _query_params of this Http.  # noqa: E501


        :return: The _query_params of this Http.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self.__query_params

    @_query_params.setter
    def _query_params(self, _query_params):
        """Sets the _query_params of this Http.


        :param _query_params: The _query_params of this Http.  # noqa: E501
        :type: dict(str, str)
        """

        self.__query_params = _query_params

    @property
    def url(self):
        """Gets the url of this Http.  # noqa: E501


        :return: The url of this Http.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Http.


        :param url: The url of this Http.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Http, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Http):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
