# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpinnakerPluginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'project_url': 'str',
        'provider': 'str',
        'releases': 'list[SpinnakerPluginRelease]',
        'repository_id': 'str'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'project_url': 'projectUrl',
        'provider': 'provider',
        'releases': 'releases',
        'repository_id': 'repositoryId'
    }

    def __init__(self, description=None, id=None, name=None, project_url=None, provider=None, releases=None, repository_id=None):  # noqa: E501
        """SpinnakerPluginInfo - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._id = None
        self._name = None
        self._project_url = None
        self._provider = None
        self._releases = None
        self._repository_id = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if project_url is not None:
            self.project_url = project_url
        if provider is not None:
            self.provider = provider
        self.releases = releases
        if repository_id is not None:
            self.repository_id = repository_id

    @property
    def description(self):
        """Gets the description of this SpinnakerPluginInfo.  # noqa: E501


        :return: The description of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SpinnakerPluginInfo.


        :param description: The description of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this SpinnakerPluginInfo.  # noqa: E501


        :return: The id of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpinnakerPluginInfo.


        :param id: The id of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SpinnakerPluginInfo.  # noqa: E501


        :return: The name of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SpinnakerPluginInfo.


        :param name: The name of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_url(self):
        """Gets the project_url of this SpinnakerPluginInfo.  # noqa: E501


        :return: The project_url of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """Sets the project_url of this SpinnakerPluginInfo.


        :param project_url: The project_url of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._project_url = project_url

    @property
    def provider(self):
        """Gets the provider of this SpinnakerPluginInfo.  # noqa: E501


        :return: The provider of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SpinnakerPluginInfo.


        :param provider: The provider of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def releases(self):
        """Gets the releases of this SpinnakerPluginInfo.  # noqa: E501


        :return: The releases of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: list[SpinnakerPluginRelease]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this SpinnakerPluginInfo.


        :param releases: The releases of this SpinnakerPluginInfo.  # noqa: E501
        :type: list[SpinnakerPluginRelease]
        """
        if releases is None:
            raise ValueError("Invalid value for `releases`, must not be `None`")  # noqa: E501

        self._releases = releases

    @property
    def repository_id(self):
        """Gets the repository_id of this SpinnakerPluginInfo.  # noqa: E501


        :return: The repository_id of this SpinnakerPluginInfo.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this SpinnakerPluginInfo.


        :param repository_id: The repository_id of this SpinnakerPluginInfo.  # noqa: E501
        :type: str
        """

        self._repository_id = repository_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpinnakerPluginInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpinnakerPluginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
