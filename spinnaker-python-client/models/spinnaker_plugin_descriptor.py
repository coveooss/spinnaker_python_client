# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpinnakerPluginDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dependencies': 'list[PluginDependency]',
        'license': 'str',
        'plugin_class': 'str',
        'plugin_description': 'str',
        'plugin_id': 'str',
        'provider': 'str',
        'requires': 'str',
        'unsafe': 'bool',
        'version': 'str'
    }

    attribute_map = {
        'dependencies': 'dependencies',
        'license': 'license',
        'plugin_class': 'pluginClass',
        'plugin_description': 'pluginDescription',
        'plugin_id': 'pluginId',
        'provider': 'provider',
        'requires': 'requires',
        'unsafe': 'unsafe',
        'version': 'version'
    }

    def __init__(self, dependencies=None, license=None, plugin_class=None, plugin_description=None, plugin_id=None, provider=None, requires=None, unsafe=None, version=None):  # noqa: E501
        """SpinnakerPluginDescriptor - a model defined in Swagger"""  # noqa: E501

        self._dependencies = None
        self._license = None
        self._plugin_class = None
        self._plugin_description = None
        self._plugin_id = None
        self._provider = None
        self._requires = None
        self._unsafe = None
        self._version = None
        self.discriminator = None

        if dependencies is not None:
            self.dependencies = dependencies
        if license is not None:
            self.license = license
        if plugin_class is not None:
            self.plugin_class = plugin_class
        if plugin_description is not None:
            self.plugin_description = plugin_description
        if plugin_id is not None:
            self.plugin_id = plugin_id
        if provider is not None:
            self.provider = provider
        if requires is not None:
            self.requires = requires
        self.unsafe = unsafe
        if version is not None:
            self.version = version

    @property
    def dependencies(self):
        """Gets the dependencies of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The dependencies of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: list[PluginDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this SpinnakerPluginDescriptor.


        :param dependencies: The dependencies of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: list[PluginDependency]
        """

        self._dependencies = dependencies

    @property
    def license(self):
        """Gets the license of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The license of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SpinnakerPluginDescriptor.


        :param license: The license of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def plugin_class(self):
        """Gets the plugin_class of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The plugin_class of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._plugin_class

    @plugin_class.setter
    def plugin_class(self, plugin_class):
        """Sets the plugin_class of this SpinnakerPluginDescriptor.


        :param plugin_class: The plugin_class of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._plugin_class = plugin_class

    @property
    def plugin_description(self):
        """Gets the plugin_description of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The plugin_description of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._plugin_description

    @plugin_description.setter
    def plugin_description(self, plugin_description):
        """Sets the plugin_description of this SpinnakerPluginDescriptor.


        :param plugin_description: The plugin_description of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._plugin_description = plugin_description

    @property
    def plugin_id(self):
        """Gets the plugin_id of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The plugin_id of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this SpinnakerPluginDescriptor.


        :param plugin_id: The plugin_id of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    @property
    def provider(self):
        """Gets the provider of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The provider of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this SpinnakerPluginDescriptor.


        :param provider: The provider of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def requires(self):
        """Gets the requires of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The requires of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._requires

    @requires.setter
    def requires(self, requires):
        """Sets the requires of this SpinnakerPluginDescriptor.


        :param requires: The requires of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._requires = requires

    @property
    def unsafe(self):
        """Gets the unsafe of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The unsafe of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._unsafe

    @unsafe.setter
    def unsafe(self, unsafe):
        """Sets the unsafe of this SpinnakerPluginDescriptor.


        :param unsafe: The unsafe of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: bool
        """
        if unsafe is None:
            raise ValueError("Invalid value for `unsafe`, must not be `None`")  # noqa: E501

        self._unsafe = unsafe

    @property
    def version(self):
        """Gets the version of this SpinnakerPluginDescriptor.  # noqa: E501


        :return: The version of this SpinnakerPluginDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SpinnakerPluginDescriptor.


        :param version: The version of this SpinnakerPluginDescriptor.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpinnakerPluginDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpinnakerPluginDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
