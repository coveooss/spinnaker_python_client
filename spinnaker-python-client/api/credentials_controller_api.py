# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spinnaker-python-client.api_client import ApiClient


class CredentialsControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_account_using_get(self, account, **kwargs):  # noqa: E501
        """Retrieve an account's details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_using_get(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: account (required)
        :param str x_rate_limit_app: X-RateLimit-App
        :param bool account_non_expired:
        :param bool account_non_locked:
        :param list[str] allowed_accounts:
        :param str authorities_0_authority:
        :param bool credentials_non_expired:
        :param str email:
        :param bool enabled:
        :param str first_name:
        :param str last_name:
        :param str password:
        :param list[str] roles:
        :param str username:
        :return: AccountDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_using_get_with_http_info(account, **kwargs)  # noqa: E501
        else:
            (data) = self.get_account_using_get_with_http_info(account, **kwargs)  # noqa: E501
            return data

    def get_account_using_get_with_http_info(self, account, **kwargs):  # noqa: E501
        """Retrieve an account's details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_using_get_with_http_info(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: account (required)
        :param str x_rate_limit_app: X-RateLimit-App
        :param bool account_non_expired:
        :param bool account_non_locked:
        :param list[str] allowed_accounts:
        :param str authorities_0_authority:
        :param bool credentials_non_expired:
        :param str email:
        :param bool enabled:
        :param str first_name:
        :param str last_name:
        :param str password:
        :param list[str] roles:
        :param str username:
        :return: AccountDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account', 'x_rate_limit_app', 'account_non_expired', 'account_non_locked', 'allowed_accounts', 'authorities_0_authority', 'credentials_non_expired', 'email', 'enabled', 'first_name', 'last_name', 'password', 'roles', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if ('account' not in params or
                params['account'] is None):
            raise ValueError("Missing the required parameter `account` when calling `get_account_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account' in params:
            path_params['account'] = params['account']  # noqa: E501

        query_params = []
        if 'account_non_expired' in params:
            query_params.append(('accountNonExpired', params['account_non_expired']))  # noqa: E501
        if 'account_non_locked' in params:
            query_params.append(('accountNonLocked', params['account_non_locked']))  # noqa: E501
        if 'allowed_accounts' in params:
            query_params.append(('allowedAccounts', params['allowed_accounts']))  # noqa: E501
            collection_formats['allowedAccounts'] = 'multi'  # noqa: E501
        if 'authorities_0_authority' in params:
            query_params.append(('authorities[0].authority', params['authorities_0_authority']))  # noqa: E501
        if 'credentials_non_expired' in params:
            query_params.append(('credentialsNonExpired', params['credentials_non_expired']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
            collection_formats['roles'] = 'multi'  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}
        if 'x_rate_limit_app' in params:
            header_params['X-RateLimit-App'] = params['x_rate_limit_app']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/credentials/{account}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts_using_get(self, **kwargs):  # noqa: E501
        """Retrieve a list of accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool account_non_expired:
        :param bool account_non_locked:
        :param list[str] allowed_accounts:
        :param str authorities_0_authority:
        :param bool credentials_non_expired:
        :param str email:
        :param bool enabled:
        :param bool expand: expand
        :param str first_name:
        :param str last_name:
        :param str password:
        :param list[str] roles:
        :param str username:
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_accounts_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool account_non_expired:
        :param bool account_non_locked:
        :param list[str] allowed_accounts:
        :param str authorities_0_authority:
        :param bool credentials_non_expired:
        :param str email:
        :param bool enabled:
        :param bool expand: expand
        :param str first_name:
        :param str last_name:
        :param str password:
        :param list[str] roles:
        :param str username:
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_non_expired', 'account_non_locked', 'allowed_accounts', 'authorities_0_authority', 'credentials_non_expired', 'email', 'enabled', 'expand', 'first_name', 'last_name', 'password', 'roles', 'username']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_non_expired' in params:
            query_params.append(('accountNonExpired', params['account_non_expired']))  # noqa: E501
        if 'account_non_locked' in params:
            query_params.append(('accountNonLocked', params['account_non_locked']))  # noqa: E501
        if 'allowed_accounts' in params:
            query_params.append(('allowedAccounts', params['allowed_accounts']))  # noqa: E501
            collection_formats['allowedAccounts'] = 'multi'  # noqa: E501
        if 'authorities_0_authority' in params:
            query_params.append(('authorities[0].authority', params['authorities_0_authority']))  # noqa: E501
        if 'credentials_non_expired' in params:
            query_params.append(('credentialsNonExpired', params['credentials_non_expired']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
            collection_formats['roles'] = 'multi'  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
