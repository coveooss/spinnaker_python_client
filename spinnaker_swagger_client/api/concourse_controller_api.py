# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spinnaker_swagger_client.api_client import ApiClient


class ConcourseControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def jobs_using_get(self, build_master, pipeline, team, **kwargs):  # noqa: E501
        """Retrieve the list of job names for a given pipeline available to triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_using_get(build_master, pipeline, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str pipeline: pipeline (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_using_get_with_http_info(build_master, pipeline, team, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_using_get_with_http_info(build_master, pipeline, team, **kwargs)  # noqa: E501
            return data

    def jobs_using_get_with_http_info(self, build_master, pipeline, team, **kwargs):  # noqa: E501
        """Retrieve the list of job names for a given pipeline available to triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_using_get_with_http_info(build_master, pipeline, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str pipeline: pipeline (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_master', 'pipeline', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_master' is set
        if ('build_master' not in params or
                params['build_master'] is None):
            raise ValueError("Missing the required parameter `build_master` when calling `jobs_using_get`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params or
                params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `jobs_using_get`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `jobs_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_master' in params:
            path_params['buildMaster'] = params['build_master']  # noqa: E501
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/concourse/{buildMaster}/teams/{team}/pipelines/{pipeline}/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pipelines_using_get(self, build_master, team, **kwargs):  # noqa: E501
        """Retrieve the list of pipeline names for a given team available to triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_using_get(build_master, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pipelines_using_get_with_http_info(build_master, team, **kwargs)  # noqa: E501
        else:
            (data) = self.pipelines_using_get_with_http_info(build_master, team, **kwargs)  # noqa: E501
            return data

    def pipelines_using_get_with_http_info(self, build_master, team, **kwargs):  # noqa: E501
        """Retrieve the list of pipeline names for a given team available to triggers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pipelines_using_get_with_http_info(build_master, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_master', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pipelines_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_master' is set
        if ('build_master' not in params or
                params['build_master'] is None):
            raise ValueError("Missing the required parameter `build_master` when calling `pipelines_using_get`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `pipelines_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_master' in params:
            path_params['buildMaster'] = params['build_master']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/concourse/{buildMaster}/teams/{team}/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resources_using_get(self, build_master, pipeline, team, **kwargs):  # noqa: E501
        """Retrieve the list of resource names for a given pipeline available to the Concourse stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_using_get(build_master, pipeline, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str pipeline: pipeline (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resources_using_get_with_http_info(build_master, pipeline, team, **kwargs)  # noqa: E501
        else:
            (data) = self.resources_using_get_with_http_info(build_master, pipeline, team, **kwargs)  # noqa: E501
            return data

    def resources_using_get_with_http_info(self, build_master, pipeline, team, **kwargs):  # noqa: E501
        """Retrieve the list of resource names for a given pipeline available to the Concourse stage  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resources_using_get_with_http_info(build_master, pipeline, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str build_master: buildMaster (required)
        :param str pipeline: pipeline (required)
        :param str team: team (required)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_master', 'pipeline', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resources_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_master' is set
        if ('build_master' not in params or
                params['build_master'] is None):
            raise ValueError("Missing the required parameter `build_master` when calling `resources_using_get`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params or
                params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `resources_using_get`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `resources_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'build_master' in params:
            path_params['buildMaster'] = params['build_master']  # noqa: E501
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/concourse/{buildMaster}/teams/{team}/pipelines/{pipeline}/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
