# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from spinnaker_swagger_client.api_client import ApiClient


class PipelineControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_pipeline_using_put1(self, id, **kwargs):  # noqa: E501
        """Cancel a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_pipeline_using_put1(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param bool force: force
        :param str reason: reason
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_pipeline_using_put1_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_pipeline_using_put1_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cancel_pipeline_using_put1_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cancel a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_pipeline_using_put1_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param bool force: force
        :param str reason: reason
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'force', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_pipeline_using_put1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancel_pipeline_using_put1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_using_delete(self, application, pipeline_name, **kwargs):  # noqa: E501
        """Delete a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_using_delete(application, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name: pipelineName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_using_delete_with_http_info(application, pipeline_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_using_delete_with_http_info(application, pipeline_name, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_using_delete_with_http_info(self, application, pipeline_name, **kwargs):  # noqa: E501
        """Delete a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_using_delete_with_http_info(application, pipeline_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name: pipelineName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'pipeline_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `delete_pipeline_using_delete`")  # noqa: E501
        # verify the required parameter 'pipeline_name' is set
        if ('pipeline_name' not in params or
                params['pipeline_name'] is None):
            raise ValueError("Missing the required parameter `pipeline_name` when calling `delete_pipeline_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501
        if 'pipeline_name' in params:
            path_params['pipelineName'] = params['pipeline_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{application}/{pipelineName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pipeline_using_delete1(self, id, **kwargs):  # noqa: E501
        """Delete a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_using_delete1(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pipeline_using_delete1_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pipeline_using_delete1_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_pipeline_using_delete1_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pipeline_using_delete1_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline_using_delete1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_pipeline_using_delete1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def evaluate_expression_for_execution_at_stage_using_get(self, expression, id, stage_id, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression at a specific stage using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_at_stage_using_get(expression, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expression: expression (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_expression_for_execution_at_stage_using_get_with_http_info(expression, id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_expression_for_execution_at_stage_using_get_with_http_info(expression, id, stage_id, **kwargs)  # noqa: E501
            return data

    def evaluate_expression_for_execution_at_stage_using_get_with_http_info(self, expression, id, stage_id, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression at a specific stage using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_at_stage_using_get_with_http_info(expression, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expression: expression (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expression', 'id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_expression_for_execution_at_stage_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `evaluate_expression_for_execution_at_stage_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `evaluate_expression_for_execution_at_stage_using_get`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `evaluate_expression_for_execution_at_stage_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []
        if 'expression' in params:
            query_params.append(('expression', params['expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/{stageId}/evaluateExpression', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def evaluate_expression_for_execution_using_get(self, expression, id, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_using_get(expression, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expression: expression (required)
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_expression_for_execution_using_get_with_http_info(expression, id, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_expression_for_execution_using_get_with_http_info(expression, id, **kwargs)  # noqa: E501
            return data

    def evaluate_expression_for_execution_using_get_with_http_info(self, expression, id, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_using_get_with_http_info(expression, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str expression: expression (required)
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['expression', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_expression_for_execution_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'expression' is set
        if ('expression' not in params or
                params['expression'] is None):
            raise ValueError("Missing the required parameter `expression` when calling `evaluate_expression_for_execution_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `evaluate_expression_for_execution_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'expression' in params:
            query_params.append(('expression', params['expression']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/evaluateExpression', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def evaluate_expression_for_execution_via_post_using_post1(self, id, pipeline_expression, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_via_post_using_post1(id, pipeline_expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param object pipeline_expression: pipelineExpression (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_expression_for_execution_via_post_using_post1_with_http_info(id, pipeline_expression, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_expression_for_execution_via_post_using_post1_with_http_info(id, pipeline_expression, **kwargs)  # noqa: E501
            return data

    def evaluate_expression_for_execution_via_post_using_post1_with_http_info(self, id, pipeline_expression, **kwargs):  # noqa: E501
        """Evaluate a pipeline expression using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_expression_for_execution_via_post_using_post1_with_http_info(id, pipeline_expression, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param object pipeline_expression: pipelineExpression (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'pipeline_expression']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_expression_for_execution_via_post_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `evaluate_expression_for_execution_via_post_using_post1`")  # noqa: E501
        # verify the required parameter 'pipeline_expression' is set
        if ('pipeline_expression' not in params or
                params['pipeline_expression'] is None):
            raise ValueError("Missing the required parameter `pipeline_expression` when calling `evaluate_expression_for_execution_via_post_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_expression' in params:
            body_params = params['pipeline_expression']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/evaluateExpression', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def evaluate_variables_using_post(self, execution_id, expressions, **kwargs):  # noqa: E501
        """Evaluate variables same as Evaluate Variables stage using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_variables_using_post(execution_id, expressions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id to run against (required)
        :param list[Mapstringstring] expressions: List of variables/expressions to evaluate (required)
        :param str requisite_stage_ref_ids: Comma separated list of requisite stage IDs for the evaluation stage
        :param str spel_version: Version of SpEL evaluation logic to use (v3 or v4)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.evaluate_variables_using_post_with_http_info(execution_id, expressions, **kwargs)  # noqa: E501
        else:
            (data) = self.evaluate_variables_using_post_with_http_info(execution_id, expressions, **kwargs)  # noqa: E501
            return data

    def evaluate_variables_using_post_with_http_info(self, execution_id, expressions, **kwargs):  # noqa: E501
        """Evaluate variables same as Evaluate Variables stage using the provided execution as context  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.evaluate_variables_using_post_with_http_info(execution_id, expressions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str execution_id: Execution id to run against (required)
        :param list[Mapstringstring] expressions: List of variables/expressions to evaluate (required)
        :param str requisite_stage_ref_ids: Comma separated list of requisite stage IDs for the evaluation stage
        :param str spel_version: Version of SpEL evaluation logic to use (v3 or v4)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['execution_id', 'expressions', 'requisite_stage_ref_ids', 'spel_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method evaluate_variables_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'execution_id' is set
        if ('execution_id' not in params or
                params['execution_id'] is None):
            raise ValueError("Missing the required parameter `execution_id` when calling `evaluate_variables_using_post`")  # noqa: E501
        # verify the required parameter 'expressions' is set
        if ('expressions' not in params or
                params['expressions'] is None):
            raise ValueError("Missing the required parameter `expressions` when calling `evaluate_variables_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'execution_id' in params:
            query_params.append(('executionId', params['execution_id']))  # noqa: E501
        if 'requisite_stage_ref_ids' in params:
            query_params.append(('requisiteStageRefIds', params['requisite_stage_ref_ids']))  # noqa: E501
        if 'spel_version' in params:
            query_params.append(('spelVersion', params['spel_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'expressions' in params:
            body_params = params['expressions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/evaluateVariables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pipeline_using_get(self, id, **kwargs):  # noqa: E501
        """Retrieve a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_using_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pipeline_using_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pipeline_using_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_pipeline_using_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pipeline_using_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_pipeline_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_pipeline_config_using_post1(self, application, pipeline_name_or_id, **kwargs):  # noqa: E501
        """Trigger a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_pipeline_config_using_post1(application, pipeline_name_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name_or_id: pipelineNameOrId (required)
        :param object trigger: trigger
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_pipeline_config_using_post1_with_http_info(application, pipeline_name_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_pipeline_config_using_post1_with_http_info(application, pipeline_name_or_id, **kwargs)  # noqa: E501
            return data

    def invoke_pipeline_config_using_post1_with_http_info(self, application, pipeline_name_or_id, **kwargs):  # noqa: E501
        """Trigger a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_pipeline_config_using_post1_with_http_info(application, pipeline_name_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name_or_id: pipelineNameOrId (required)
        :param object trigger: trigger
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'pipeline_name_or_id', 'trigger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_pipeline_config_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `invoke_pipeline_config_using_post1`")  # noqa: E501
        # verify the required parameter 'pipeline_name_or_id' is set
        if ('pipeline_name_or_id' not in params or
                params['pipeline_name_or_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_name_or_id` when calling `invoke_pipeline_config_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501
        if 'pipeline_name_or_id' in params:
            path_params['pipelineNameOrId'] = params['pipeline_name_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trigger' in params:
            body_params = params['trigger']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{application}/{pipelineNameOrId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_pipeline_config_via_echo_using_post(self, application, pipeline_name_or_id, **kwargs):  # noqa: E501
        """Trigger a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_pipeline_config_via_echo_using_post(application, pipeline_name_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name_or_id: pipelineNameOrId (required)
        :param object trigger: trigger
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_pipeline_config_via_echo_using_post_with_http_info(application, pipeline_name_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_pipeline_config_via_echo_using_post_with_http_info(application, pipeline_name_or_id, **kwargs)  # noqa: E501
            return data

    def invoke_pipeline_config_via_echo_using_post_with_http_info(self, application, pipeline_name_or_id, **kwargs):  # noqa: E501
        """Trigger a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_pipeline_config_via_echo_using_post_with_http_info(application, pipeline_name_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str application: application (required)
        :param str pipeline_name_or_id: pipelineNameOrId (required)
        :param object trigger: trigger
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application', 'pipeline_name_or_id', 'trigger']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_pipeline_config_via_echo_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application' is set
        if ('application' not in params or
                params['application'] is None):
            raise ValueError("Missing the required parameter `application` when calling `invoke_pipeline_config_via_echo_using_post`")  # noqa: E501
        # verify the required parameter 'pipeline_name_or_id' is set
        if ('pipeline_name_or_id' not in params or
                params['pipeline_name_or_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_name_or_id` when calling `invoke_pipeline_config_via_echo_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'application' in params:
            path_params['application'] = params['application']  # noqa: E501
        if 'pipeline_name_or_id' in params:
            path_params['pipelineNameOrId'] = params['pipeline_name_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'trigger' in params:
            body_params = params['trigger']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/v2/{application}/{pipelineNameOrId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pause_pipeline_using_put(self, id, **kwargs):  # noqa: E501
        """Pause a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_pipeline_using_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pause_pipeline_using_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.pause_pipeline_using_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def pause_pipeline_using_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Pause a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pause_pipeline_using_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_pipeline_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `pause_pipeline_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/pause', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_pipeline_using_post(self, rename_command, **kwargs):  # noqa: E501
        """Rename a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_pipeline_using_post(rename_command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object rename_command: renameCommand (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_pipeline_using_post_with_http_info(rename_command, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_pipeline_using_post_with_http_info(rename_command, **kwargs)  # noqa: E501
            return data

    def rename_pipeline_using_post_with_http_info(self, rename_command, **kwargs):  # noqa: E501
        """Rename a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_pipeline_using_post_with_http_info(rename_command, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object rename_command: renameCommand (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rename_command']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_pipeline_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rename_command' is set
        if ('rename_command' not in params or
                params['rename_command'] is None):
            raise ValueError("Missing the required parameter `rename_command` when calling `rename_pipeline_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rename_command' in params:
            body_params = params['rename_command']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_stage_using_put(self, context, id, stage_id, **kwargs):  # noqa: E501
        """Restart a stage execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_stage_using_put(context, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object context: context (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_stage_using_put_with_http_info(context, id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_stage_using_put_with_http_info(context, id, stage_id, **kwargs)  # noqa: E501
            return data

    def restart_stage_using_put_with_http_info(self, context, id, stage_id, **kwargs):  # noqa: E501
        """Restart a stage execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_stage_using_put_with_http_info(context, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object context: context (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context', 'id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_stage_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context' is set
        if ('context' not in params or
                params['context'] is None):
            raise ValueError("Missing the required parameter `context` when calling `restart_stage_using_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restart_stage_using_put`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `restart_stage_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'context' in params:
            body_params = params['context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/stages/{stageId}/restart', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resume_pipeline_using_put(self, id, **kwargs):  # noqa: E501
        """Resume a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_pipeline_using_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resume_pipeline_using_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.resume_pipeline_using_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def resume_pipeline_using_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """Resume a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resume_pipeline_using_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_pipeline_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resume_pipeline_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/resume', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_pipeline_using_post(self, pipeline, **kwargs):  # noqa: E501
        """Save a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_pipeline_using_post(pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pipeline: pipeline (required)
        :param bool stale_check: staleCheck
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_pipeline_using_post_with_http_info(pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.save_pipeline_using_post_with_http_info(pipeline, **kwargs)  # noqa: E501
            return data

    def save_pipeline_using_post_with_http_info(self, pipeline, **kwargs):  # noqa: E501
        """Save a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_pipeline_using_post_with_http_info(pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object pipeline: pipeline (required)
        :param bool stale_check: staleCheck
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pipeline', 'stale_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_pipeline_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params or
                params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `save_pipeline_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'stale_check' in params:
            query_params.append(('staleCheck', params['stale_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline' in params:
            body_params = params['pipeline']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_using_post(self, map, **kwargs):  # noqa: E501
        """Initiate a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_using_post(map, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object map: map (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_using_post_with_http_info(map, **kwargs)  # noqa: E501
        else:
            (data) = self.start_using_post_with_http_info(map, **kwargs)  # noqa: E501
            return data

    def start_using_post_with_http_info(self, map, **kwargs):  # noqa: E501
        """Initiate a pipeline execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_using_post_with_http_info(map, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object map: map (required)
        :return: ResponseEntity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['map']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'map' is set
        if ('map' not in params or
                params['map'] is None):
            raise ValueError("Missing the required parameter `map` when calling `start_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'map' in params:
            body_params = params['map']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseEntity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_pipeline_using_put(self, id, pipeline, **kwargs):  # noqa: E501
        """Update a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_using_put(id, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param object pipeline: pipeline (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_pipeline_using_put_with_http_info(id, pipeline, **kwargs)  # noqa: E501
        else:
            (data) = self.update_pipeline_using_put_with_http_info(id, pipeline, **kwargs)  # noqa: E501
            return data

    def update_pipeline_using_put_with_http_info(self, id, pipeline, **kwargs):  # noqa: E501
        """Update a pipeline definition  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_pipeline_using_put_with_http_info(id, pipeline, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: id (required)
        :param object pipeline: pipeline (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'pipeline']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pipeline_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_pipeline_using_put`")  # noqa: E501
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params or
                params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `update_pipeline_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline' in params:
            body_params = params['pipeline']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_stage_using_patch(self, context, id, stage_id, **kwargs):  # noqa: E501
        """Update a stage execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stage_using_patch(context, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object context: context (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_stage_using_patch_with_http_info(context, id, stage_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_stage_using_patch_with_http_info(context, id, stage_id, **kwargs)  # noqa: E501
            return data

    def update_stage_using_patch_with_http_info(self, context, id, stage_id, **kwargs):  # noqa: E501
        """Update a stage execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_stage_using_patch_with_http_info(context, id, stage_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object context: context (required)
        :param str id: id (required)
        :param str stage_id: stageId (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context', 'id', 'stage_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stage_using_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context' is set
        if ('context' not in params or
                params['context'] is None):
            raise ValueError("Missing the required parameter `context` when calling `update_stage_using_patch`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_stage_using_patch`")  # noqa: E501
        # verify the required parameter 'stage_id' is set
        if ('stage_id' not in params or
                params['stage_id'] is None):
            raise ValueError("Missing the required parameter `stage_id` when calling `update_stage_using_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'stage_id' in params:
            path_params['stageId'] = params['stage_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'context' in params:
            body_params = params['context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pipelines/{id}/stages/{stageId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
